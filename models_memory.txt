class OneMemoryDiamondQFT(ApproxUsingInverse):
    def __init__(self):
        targets = [0, 1, 2, 3]  # These are the qubits of the diamond
        ancilla_swap0 = lambda: ISWAPLayer([0, 4])
        ancilla_swap1 = lambda: ISWAPLayer([1, 5])
        ancilla_U3 = lambda: U3Layer([4, 5])
        model = QCModel(layers=[
            InputLayer((2**6, 1), dtype=complex_type, name='input_state'),
            U3Layer(),
            HLayer(0),
            ancilla_swap0(),
            ancilla_swap1(),
            ULayer(targets),
            ancilla_U3(),
            ancilla_swap1(),
            ancilla_swap0(),
            HLayer(1),
            ancilla_swap0(),
            ancilla_swap1(),
            ULayer(targets),
            ancilla_U3(),
            ancilla_swap1(),
            ancilla_swap0(),
            HLayer(2),
            ancilla_swap0(),
            ancilla_swap1(),
            ULayer(targets),
            ancilla_U3(),
            ancilla_swap1(),
            ancilla_swap0(),
            HLayer(3),
            U3Layer(),
            QFTCrossSwapLayer()
        ])
        target = QCModel(layers=[
            IQFTLayer(targets)
        ])
        super(OneMemoryDiamondQFT, self).__init__(model, target, 'model_c')

class OneMemoryDiamondQFT(ApproxUsingInverse):
    def __init__(self):
        targets = [0, 1, 2, 3]  # These are the qubits of the diamond
        ancilla_swap0 = lambda: ISWAPLayer([0, 4], parameterized=True)
        ancilla_swap1 = lambda: ISWAPLayer([1, 5], parameterized=True)
        ancilla_U3 = lambda: U3Layer([4, 5])
        model = QCModel(layers=[
            InputLayer((2**6, 1), dtype=complex_type, name='input_state'),
            U3Layer(),
            HLayer(0),
            ancilla_swap0(),
            ancilla_swap1(),
            ULayer(targets),
            ancilla_swap1(),
            ancilla_swap0(),
            HLayer(1),
            ancilla_swap0(),
            ancilla_swap1(),
            ULayer(targets),
            ancilla_swap1(),
            ancilla_swap0(),
            HLayer(2),
            ancilla_swap0(),
            ancilla_swap1(),
            ULayer(targets),
            ancilla_swap1(),
            ancilla_swap0(),
            HLayer(3),
            U3Layer(),
            QFTCrossSwapLayer()
        ])
        target = QCModel(layers=[
            IQFTLayer(targets)
        ])
        super(OneMemoryDiamondQFT, self).__init__(model, target, 'model_b')